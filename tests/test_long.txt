To serialize an object hierarchy, you first create a pickler, then you call the pickler’s dump() method. To de-serialize a data stream, you first create an unpickler, then you call the unpickler’s load() method. The pickle module provides the following constant:
pickle.HIGHEST_PROTOCOL
    The highest protocol version available. This value can be passed as a protocol value.
    New in version 2.3.
Note
Be sure to always open pickle files created with protocols >= 1 in binary mode. For the old ASCII-based pickle protocol 0 you can use either text mode or binary mode as long as you stay consistent.
A pickle file written with protocol 0 in binary mode will contain lone linefeeds as line terminators and therefore will look “funny” when viewed in Notepad or other editors which do not support this format.
The pickle module provides the following functions to make the pickling process more convenient:
pickle.dump(obj, file[, protocol])
    Write a pickled representation of obj to the open file object file. This is equivalent to Pickler(file, protocol).dump(obj).
    If the protocol parameter is omitted, protocol 0 is used. If protocol is specified as a negative value or HIGHEST_PROTOCOL, the highest protocol version will be used.
    Changed in version 2.3: Introduced the protocol parameter.
    file must have a write() method that accepts a single string argument. It can thus be a file object opened for writing, a StringIO object, or any other custom object that meets this interface.
pickle.load(file)
    Read a string from the open file object file and interpret it as a pickle data stream, reconstructing and returning the original object hierarchy. This is equivalent to Unpickler(file).load().
    file must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments. Both methods should return a string. Thus file can be a file object opened for reading, a StringIO object, or any other custom object that meets this interface.
    This function automatically determines whether the data stream was written in binary mode or not.
pickle.dumps(obj[, protocol])
    Return the pickled representation of the object as a string, instead of writing it to a file.
    If the protocol parameter is omitted, protocol 0 is used. If protocol is specified as a negative value or HIGHEST_PROTOCOL, the highest protocol version will be used.
    Changed in version 2.3: The protocol parameter was added.
pickle.loads(string)
    Read a pickled object hierarchy from a string. Characters in the string past the pickled object’s representation are ignored.
The pickle module also defines three exceptions:
exception pickle.PickleError
    A common base class for the other exceptions defined below. This inherits from Exception.
exception pickle.PicklingError
    This exception is raised when an unpicklable object is passed to the dump() method.
exception pickle.UnpicklingError
    This exception is raised when there is a problem unpickling an object. Note that other exceptions may also be raised during unpickling, including (but not necessarily limited to) AttributeError, EOFError, ImportError, and IndexError.
The pickle module also exports two callables [2], Pickler and Unpickler:
class pickle.Pickler(file[, protocol])
    This takes a file-like object to which it will write a pickle data stream.
    If the protocol parameter is omitted, protocol 0 is used. If protocol is specified as a negative value or HIGHEST_PROTOCOL, the highest protocol version will be used.
    Changed in version 2.3: Introduced the protocol parameter.
    file must have a write() method that accepts a single string argument. It can thus be an open file object, a StringIO object, or any other custom object that meets this interface.
    Pickler objects define one (or two) public methods:
    dump(obj)
        Write a pickled representation of obj to the open file object given in the constructor. Either the binary or ASCII format will be used, depending on the value of the protocol argument passed to the constructor.
    clear_memo()
        Clears the pickler’s “memo”. The memo is the data structure that remembers which objects the pickler has already seen, so that shared or recursive objects pickled by reference and not by value. This method is useful when re-using picklers.
        Note
        Prior to Python 2.3, clear_memo() was only available on the picklers created by cPickle. In the pickle module, picklers have an instance variable called memo which is a Python dictionary. So to clear the memo for a pickle module pickler, you could do the following:
        mypickler.memo.clear()
        Code that does not need to support older versions of Python should simply use clear_memo().
It is possible to make multiple calls to the dump() method of the same Pickler instance. These must then be matched to the same number of calls to the load() method of the corresponding Unpickler instance. If the same object is pickled by multiple dump() calls, the load() will all yield references to the same object. [3]
